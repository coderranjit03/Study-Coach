questions_data = [
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools returns an iterator that yields the running minimum of values in an iterable?", "options": ["accumulate", "groupby", "cycle", "repeat"], "answer": "accumulate", "explanation": "itertools.accumulate can be used with min to yield running minimums."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a stack with fast append and pop operations?", "options": ["deque", "Counter", "OrderedDict", "ChainMap"], "answer": "deque", "explanation": "collections.deque is optimized for stack operations."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in functools is used to create a decorator that preserves the __doc__ and __name__ attributes?", "options": ["wraps", "partial", "reduce", "lru_cache"], "answer": "wraps", "explanation": "functools.wraps preserves __doc__ and __name__ attributes."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a multiset (bag) of elements?", "options": ["Counter", "defaultdict", "OrderedDict", "ChainMap"], "answer": "Counter", "explanation": "collections.Counter is a multiset implementation."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools can be used to create an iterator that returns the elements of the iterable in reverse order?", "options": ["reversed", "cycle", "repeat", "accumulate"], "answer": "reversed", "explanation": "reversed() returns an iterator that accesses the given sequence in reverse order."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that returns a default value for missing keys without raising KeyError?", "options": ["defaultdict", "Counter", "OrderedDict", "ChainMap"], "answer": "defaultdict", "explanation": "collections.defaultdict returns a default value for missing keys."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in functools is used to create a decorator that preserves the signature and docstring of the original function?", "options": ["wraps", "partial", "reduce", "lru_cache"], "answer": "wraps", "explanation": "functools.wraps preserves the signature and docstring."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that combines multiple dictionaries into a single view?", "options": ["ChainMap", "Counter", "OrderedDict", "defaultdict"], "answer": "ChainMap", "explanation": "collections.ChainMap combines multiple dictionaries."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools can be used to create an iterator that returns the elements of the iterable in sorted order?", "options": ["sorted", "cycle", "repeat", "accumulate"], "answer": "sorted", "explanation": "sorted() returns a new sorted list from the elements of any iterable."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that maintains the order of keys as they are inserted?", "options": ["OrderedDict", "defaultdict", "Counter", "ChainMap"], "answer": "OrderedDict", "explanation": "collections.OrderedDict maintains insertion order of keys."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which functools function is used to cache the results of expensive function calls?", "options": ["lru_cache", "partial", "wraps", "reduce"], "answer": "lru_cache", "explanation": "functools.lru_cache caches the results of function calls."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which itertools function groups consecutive elements that have the same key?", "options": ["groupby", "cycle", "repeat", "accumulate"], "answer": "groupby", "explanation": "itertools.groupby groups consecutive elements with the same key."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a dictionary with a default value for missing keys?", "options": ["defaultdict", "Counter", "OrderedDict", "ChainMap"], "answer": "defaultdict", "explanation": "collections.defaultdict provides a default value for missing keys."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which functools function is used to create a new function with some arguments fixed?", "options": ["partial", "wraps", "reduce", "lru_cache"], "answer": "partial", "explanation": "functools.partial creates a new function with fixed arguments."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which itertools function returns an iterator that produces elements from the input iterable as long as the predicate is true?", "options": ["takewhile", "dropwhile", "cycle", "repeat"], "answer": "takewhile", "explanation": "itertools.takewhile returns elements as long as the predicate is true."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to count hashable objects?", "options": ["Counter", "defaultdict", "OrderedDict", "ChainMap"], "answer": "Counter", "explanation": "collections.Counter counts hashable objects."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which functools function is used to apply a function of two arguments cumulatively to the items of a sequence?", "options": ["reduce", "partial", "wraps", "lru_cache"], "answer": "reduce", "explanation": "functools.reduce applies a function cumulatively to the items of a sequence."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which itertools function returns an iterator that produces elements from the input iterable as long as the predicate is false?", "options": ["dropwhile", "takewhile", "cycle", "repeat"], "answer": "dropwhile", "explanation": "itertools.dropwhile returns elements as long as the predicate is false."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a dictionary that maintains the order of keys as they are inserted?", "options": ["OrderedDict", "defaultdict", "Counter", "ChainMap"], "answer": "OrderedDict", "explanation": "collections.OrderedDict maintains insertion order of keys."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools returns an iterator that yields the Cartesian product of input iterables?", "options": ["product", "permutations", "combinations", "accumulate"], "answer": "product", "explanation": "itertools.product returns the Cartesian product of input iterables."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a dictionary that returns a default value for missing keys using a factory function?", "options": ["defaultdict", "Counter", "OrderedDict", "ChainMap"], "answer": "defaultdict", "explanation": "collections.defaultdict uses a factory function for default values."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which functools function is used to cache the results of a function with a specified maximum size?", "options": ["lru_cache", "partial", "wraps", "reduce"], "answer": "lru_cache", "explanation": "functools.lru_cache can be configured with a maxsize parameter."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which itertools function returns all possible orderings of an input iterable?", "options": ["permutations", "combinations", "product", "cycle"], "answer": "permutations", "explanation": "itertools.permutations returns all possible orderings."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that combines multiple dictionaries and searches them in order?", "options": ["ChainMap", "Counter", "OrderedDict", "defaultdict"], "answer": "ChainMap", "explanation": "collections.ChainMap searches multiple dictionaries in order."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which functools function is used to create a decorator that caches the results of a function based on its arguments?", "options": ["lru_cache", "wraps", "partial", "reduce"], "answer": "lru_cache", "explanation": "functools.lru_cache caches results based on arguments."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which itertools function returns r length subsequences of elements from the input iterable?", "options": ["combinations", "permutations", "product", "cycle"], "answer": "combinations", "explanation": "itertools.combinations returns r length subsequences."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a dictionary that maintains the order of keys as they are inserted?", "options": ["OrderedDict", "defaultdict", "Counter", "ChainMap"], "answer": "OrderedDict", "explanation": "collections.OrderedDict maintains insertion order of keys."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which functools function is used to create a new function with some arguments fixed?", "options": ["partial", "wraps", "reduce", "lru_cache"], "answer": "partial", "explanation": "functools.partial creates a new function with fixed arguments."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which itertools function returns an iterator that produces elements from the input iterable as long as the predicate is true?", "options": ["takewhile", "dropwhile", "cycle", "repeat"], "answer": "takewhile", "explanation": "itertools.takewhile returns elements as long as the predicate is true."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to count the frequency of elements in an iterable?", "options": ["Counter", "defaultdict", "OrderedDict", "ChainMap"], "answer": "Counter", "explanation": "collections.Counter counts the frequency of elements."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which functools function is used to apply a function of two arguments cumulatively to the items of a sequence, from left to right?", "options": ["reduce", "partial", "wraps", "lru_cache"], "answer": "reduce", "explanation": "functools.reduce applies a function cumulatively from left to right."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which itertools function returns an iterator that yields elements from the input iterable as long as the predicate is false?", "options": ["dropwhile", "takewhile", "cycle", "repeat"], "answer": "dropwhile", "explanation": "itertools.dropwhile yields elements as long as the predicate is false."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a dictionary that maintains the order of keys as they are inserted?", "options": ["OrderedDict", "defaultdict", "Counter", "ChainMap"], "answer": "OrderedDict", "explanation": "collections.OrderedDict maintains insertion order of keys."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which itertools function returns an iterator that produces elements from the input iterable repeatedly?", "options": ["cycle", "repeat", "accumulate", "groupby"], "answer": "cycle", "explanation": "itertools.cycle produces elements repeatedly."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools returns an iterator that yields the running sum of values in an iterable?", "options": ["accumulate", "groupby", "cycle", "repeat"], "answer": "accumulate", "explanation": "itertools.accumulate yields the running sum of values."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that returns a default value for missing keys without raising KeyError?", "options": ["defaultdict", "Counter", "OrderedDict", "ChainMap"], "answer": "defaultdict", "explanation": "collections.defaultdict returns a default value for missing keys."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in functools is used to create a decorator that preserves the __doc__ and __name__ attributes?", "options": ["wraps", "partial", "reduce", "lru_cache"], "answer": "wraps", "explanation": "functools.wraps preserves __doc__ and __name__ attributes."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a multiset (bag) of elements?", "options": ["Counter", "defaultdict", "OrderedDict", "ChainMap"], "answer": "Counter", "explanation": "collections.Counter is a multiset implementation."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools can be used to create an iterator that returns the elements of the iterable in reverse order?", "options": ["reversed", "cycle", "repeat", "accumulate"], "answer": "reversed", "explanation": "reversed() returns an iterator that accesses the given sequence in reverse order."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which module provides the OrderedDict class for maintaining insertion order of keys in a dictionary?", "options": ["collections", "itertools", "functools", "operator"], "answer": "collections", "explanation": "collections.OrderedDict maintains insertion order of keys."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools returns an iterator that yields elements from multiple iterables in sequence?", "options": ["chain", "cycle", "repeat", "accumulate"], "answer": "chain", "explanation": "itertools.chain yields elements from multiple iterables in sequence."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which module provides the function islice for slicing iterators?", "options": ["itertools", "collections", "functools", "operator"], "answer": "itertools", "explanation": "itertools.islice allows slicing of iterators."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in functools is used to create a decorator that caches the results of a function with a user-defined cache size?", "options": ["lru_cache", "wraps", "partial", "reduce"], "answer": "lru_cache", "explanation": "functools.lru_cache can be configured with a user-defined cache size."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which module provides the function starmap for mapping a function over argument tuples?", "options": ["itertools", "collections", "functools", "operator"], "answer": "itertools", "explanation": "itertools.starmap maps a function over argument tuples."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools returns an iterator that yields the running maximum of values in an iterable?", "options": ["accumulate", "groupby", "cycle", "repeat"], "answer": "accumulate", "explanation": "itertools.accumulate can be used with max to yield running maximums."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that returns a default value for missing keys without raising KeyError?", "options": ["defaultdict", "Counter", "OrderedDict", "ChainMap"], "answer": "defaultdict", "explanation": "collections.defaultdict returns a default value for missing keys."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in functools is used to create a decorator that preserves the __doc__ and __name__ attributes?", "options": ["wraps", "partial", "reduce", "lru_cache"], "answer": "wraps", "explanation": "functools.wraps preserves __doc__ and __name__ attributes."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a multiset (bag) of elements?", "options": ["Counter", "defaultdict", "OrderedDict", "ChainMap"], "answer": "Counter", "explanation": "collections.Counter is a multiset implementation."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools can be used to create an iterator that returns the elements of the iterable in reverse order?", "options": ["reversed", "cycle", "repeat", "accumulate"], "answer": "reversed", "explanation": "reversed() returns an iterator that accesses the given sequence in reverse order."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which module provides the OrderedDict class for maintaining insertion order of keys in a dictionary?", "options": ["collections", "itertools", "functools", "operator"], "answer": "collections", "explanation": "collections.OrderedDict maintains insertion order of keys."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools returns an iterator that yields elements from multiple iterables in sequence?", "options": ["chain", "cycle", "repeat", "accumulate"], "answer": "chain", "explanation": "itertools.chain yields elements from multiple iterables in sequence."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which module provides the function islice for slicing iterators?", "options": ["itertools", "collections", "functools", "operator"], "answer": "itertools", "explanation": "itertools.islice allows slicing of iterators."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in functools is used to create a decorator that caches the results of a function with a user-defined cache size?", "options": ["lru_cache", "wraps", "partial", "reduce"], "answer": "lru_cache", "explanation": "functools.lru_cache can be configured with a user-defined cache size."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which module provides the function starmap for mapping a function over argument tuples?", "options": ["itertools", "collections", "functools", "operator"], "answer": "itertools", "explanation": "itertools.starmap maps a function over argument tuples."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools returns an iterator that yields the accumulated results of a binary function (like multiplication) applied to the items of an iterable?", "options": ["accumulate", "groupby", "cycle", "repeat"], "answer": "accumulate", "explanation": "itertools.accumulate can use any binary function, not just addition."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that provides a chain of multiple dictionaries for lookup?", "options": ["ChainMap", "Counter", "OrderedDict", "defaultdict"], "answer": "ChainMap", "explanation": "collections.ChainMap provides a chain of dictionaries for lookup."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which functools function is used to create a decorator that caches the results of a function with a time-to-live (TTL) expiration?", "options": ["cachetools.ttl_cache", "lru_cache", "wraps", "partial"], "answer": "cachetools.ttl_cache", "explanation": "cachetools.ttl_cache is used for TTL-based caching, not in the standard library but commonly used with functools."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which itertools function returns an iterator that yields elements from the input iterable, skipping elements as long as the predicate is true, then yields the rest?", "options": ["dropwhile", "takewhile", "cycle", "repeat"], "answer": "dropwhile", "explanation": "itertools.dropwhile skips elements as long as the predicate is true, then yields the rest."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that maintains the order of keys as they are inserted and supports reordering?", "options": ["OrderedDict", "defaultdict", "Counter", "ChainMap"], "answer": "OrderedDict", "explanation": "collections.OrderedDict supports reordering of keys."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools returns an iterator that yields elements from the input iterable, grouped by a key function?", "options": ["groupby", "accumulate", "cycle", "repeat"], "answer": "groupby", "explanation": "itertools.groupby groups elements by a key function."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which functools function is used to create a decorator that preserves the signature and docstring of the original function?", "options": ["wraps", "partial", "reduce", "lru_cache"], "answer": "wraps", "explanation": "functools.wraps preserves the signature and docstring."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that returns a default value for missing keys using a factory function?", "options": ["defaultdict", "Counter", "OrderedDict", "ChainMap"], "answer": "defaultdict", "explanation": "collections.defaultdict uses a factory function for default values."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools returns an iterator that yields all possible r-length permutations of input elements?", "options": ["permutations", "combinations", "product", "cycle"], "answer": "permutations", "explanation": "itertools.permutations returns all possible r-length orderings."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which module provides the function compress for filtering elements from data, returning only those that have a corresponding element in selectors that evaluates to True?", "options": ["itertools", "collections", "functools", "operator"], "answer": "itertools", "explanation": "itertools.compress filters elements based on a selector iterable."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools returns an iterator that yields elements from the input iterable, cycling through the iterable indefinitely?", "options": ["cycle", "repeat", "accumulate", "groupby"], "answer": "cycle", "explanation": "itertools.cycle cycles through the input iterable indefinitely."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that returns a default value for missing keys using a user-defined function?", "options": ["defaultdict", "Counter", "OrderedDict", "ChainMap"], "answer": "defaultdict", "explanation": "collections.defaultdict can use a user-defined function for default values."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which functools function is used to create a decorator that caches the results of a function with a maximum cache size?", "options": ["lru_cache", "wraps", "partial", "reduce"], "answer": "lru_cache", "explanation": "functools.lru_cache can be configured with a maximum cache size."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which itertools function returns an iterator that yields elements from the input iterable, repeating each element a specified number of times?", "options": ["repeat", "cycle", "accumulate", "groupby"], "answer": "repeat", "explanation": "itertools.repeat repeats an object a specified number of times."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that maintains the order of keys as they are inserted and allows moving keys to the end or beginning?", "options": ["OrderedDict", "defaultdict", "Counter", "ChainMap"], "answer": "OrderedDict", "explanation": "collections.OrderedDict allows moving keys to the end or beginning."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools returns an iterator that yields elements from the input iterable, filtering elements by a predicate function?", "options": ["filterfalse", "takewhile", "dropwhile", "cycle"], "answer": "filterfalse", "explanation": "itertools.filterfalse filters elements for which the predicate is False."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which functools function is used to create a decorator that caches the results of a function with a least-recently-used (LRU) eviction policy and a custom key function?", "options": ["lru_cache", "wraps", "partial", "reduce"], "answer": "lru_cache", "explanation": "functools.lru_cache can use a custom key function for caching."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that combines multiple dictionaries and allows updating the underlying dictionaries?", "options": ["ChainMap", "Counter", "OrderedDict", "defaultdict"], "answer": "ChainMap", "explanation": "collections.ChainMap allows updating the underlying dictionaries."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools returns an iterator that yields elements from the input iterable, skipping elements as long as the predicate is false, then yields the rest?", "options": ["dropwhile", "takewhile", "cycle", "repeat"], "answer": "dropwhile", "explanation": "itertools.dropwhile skips elements as long as the predicate is false, then yields the rest."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which module provides the function tee for creating multiple independent iterators from a single iterable?", "options": ["itertools", "collections", "functools", "operator"], "answer": "itertools", "explanation": "itertools.tee creates multiple independent iterators from a single iterable."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools returns an iterator that yields elements from the input iterable, paired with their index?", "options": ["enumerate", "zip", "map", "filter"], "answer": "enumerate", "explanation": "enumerate yields pairs of index and value from an iterable."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that allows for fast membership testing and set operations?", "options": ["Counter", "defaultdict", "OrderedDict", "ChainMap"], "answer": "Counter", "explanation": "collections.Counter supports set operations and fast membership testing."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which functools function is used to create a decorator that caches the results of a function with a custom cache implementation?", "options": ["lru_cache", "wraps", "partial", "cache"], "answer": "cache", "explanation": "functools.cache allows for a custom cache implementation in Python 3.9+."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which itertools function returns an iterator that yields elements from the input iterable, grouped into fixed-length chunks?", "options": ["grouper", "groupby", "accumulate", "repeat"], "answer": "grouper", "explanation": "grouper is a common recipe using itertools to group elements into fixed-length chunks."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that supports both key and attribute access?", "options": ["ChainMap", "Counter", "OrderedDict", "defaultdict"], "answer": "ChainMap", "explanation": "ChainMap can be extended to support attribute access as well as key access."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in functools is used to create a decorator that caches the results of a function with a maximum age for cache entries?", "options": ["cachetools.ttl_cache", "lru_cache", "wraps", "partial"], "answer": "cachetools.ttl_cache", "explanation": "cachetools.ttl_cache supports a maximum age for cache entries."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which itertools function returns an iterator that yields elements from the input iterable, skipping elements until the predicate becomes true?", "options": ["dropwhile", "takewhile", "cycle", "repeat"], "answer": "dropwhile", "explanation": "itertools.dropwhile skips elements until the predicate becomes true."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that supports merging multiple dictionaries into a single view?", "options": ["ChainMap", "Counter", "OrderedDict", "defaultdict"], "answer": "ChainMap", "explanation": "collections.ChainMap supports merging multiple dictionaries."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools returns an iterator that yields elements from the input iterable, filtering elements for which the predicate is true?", "options": ["filter", "filterfalse", "takewhile", "dropwhile"], "answer": "filter", "explanation": "filter yields elements for which the predicate is true."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which module provides the function accumulate for accumulating results of a binary function?", "options": ["itertools", "collections", "functools", "operator"], "answer": "itertools", "explanation": "itertools.accumulate accumulates results of a binary function."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools returns an iterator that yields elements from the input iterable, stopping after a specified number of elements?", "options": ["islice", "takewhile", "dropwhile", "repeat"], "answer": "islice", "explanation": "itertools.islice stops after a specified number of elements."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that supports updating and merging with other mappings?", "options": ["ChainMap", "Counter", "OrderedDict", "defaultdict"], "answer": "ChainMap", "explanation": "collections.ChainMap supports updating and merging with other mappings."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which functools function is used to create a decorator that caches the results of a function with a custom eviction policy?", "options": ["cachetools.LRUCache", "lru_cache", "wraps", "partial"], "answer": "cachetools.LRUCache", "explanation": "cachetools.LRUCache allows for a custom eviction policy."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which itertools function returns an iterator that yields elements from the input iterable, skipping elements until the predicate becomes false?", "options": ["takewhile", "dropwhile", "cycle", "repeat"], "answer": "takewhile", "explanation": "itertools.takewhile skips elements until the predicate becomes false."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that supports both key and attribute access and can be easily converted to a dictionary?", "options": ["ChainMap", "Counter", "OrderedDict", "defaultdict"], "answer": "ChainMap", "explanation": "ChainMap can be converted to a dictionary and supports attribute access if extended."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in functools is used to create a decorator that caches the results of a function with a maximum number of cache entries?", "options": ["lru_cache", "wraps", "partial", "cache"], "answer": "lru_cache", "explanation": "functools.lru_cache can be configured with a maximum number of cache entries."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which itertools function returns an iterator that yields elements from the input iterable, grouped by a key function and sorted by that key?", "options": ["groupby", "accumulate", "cycle", "repeat"], "answer": "groupby", "explanation": "itertools.groupby groups and sorts elements by a key function."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that supports merging multiple dictionaries and updating the underlying dictionaries?", "options": ["ChainMap", "Counter", "OrderedDict", "defaultdict"], "answer": "ChainMap", "explanation": "collections.ChainMap supports merging and updating multiple dictionaries."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools returns an iterator that yields elements from the input iterable, filtering elements for which the predicate is false?", "options": ["filterfalse", "filter", "takewhile", "dropwhile"], "answer": "filterfalse", "explanation": "filterfalse yields elements for which the predicate is false."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which module provides the function zip_longest for zipping iterables and filling missing values?", "options": ["itertools", "collections", "functools", "operator"], "answer": "itertools", "explanation": "itertools.zip_longest zips iterables and fills missing values with a specified value."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools returns an iterator that yields elements from the input iterable, filling missing values with a specified value?", "options": ["zip_longest", "zip", "chain", "repeat"], "answer": "zip_longest", "explanation": "itertools.zip_longest fills missing values with a specified value."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that supports both key and attribute access and can be updated with new mappings?", "options": ["ChainMap", "Counter", "OrderedDict", "defaultdict"], "answer": "ChainMap", "explanation": "ChainMap can be updated with new mappings and supports attribute access if extended."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which functools function is used to create a decorator that caches the results of a function with a custom cache key function?", "options": ["lru_cache", "wraps", "partial", "cache"], "answer": "lru_cache", "explanation": "functools.lru_cache can use a custom cache key function."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which itertools function returns an iterator that yields elements from the input iterable, grouped by a key function and allows for custom grouping logic?", "options": ["groupby", "accumulate", "cycle", "repeat"], "answer": "groupby", "explanation": "itertools.groupby allows for custom grouping logic using a key function."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that supports merging, updating, and attribute access, and can be converted to a dictionary?", "options": ["ChainMap", "Counter", "OrderedDict", "defaultdict"], "answer": "ChainMap", "explanation": "ChainMap supports merging, updating, attribute access, and conversion to a dictionary if extended."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which module provides the function count for creating an iterator that returns evenly spaced values starting with a specified number?", "options": ["itertools", "collections", "functools", "operator"], "answer": "itertools", "explanation": "itertools.count returns evenly spaced values starting with a specified number."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in functools is used to create a decorator that caches the results of a function with a FIFO (first-in, first-out) eviction policy?", "options": ["cachetools.FIFOCache", "lru_cache", "wraps", "partial"], "answer": "cachetools.FIFOCache", "explanation": "cachetools.FIFOCache provides FIFO eviction, not in the standard library but commonly used with functools."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which module provides the deque class for fast appends and pops from both ends of a sequence?", "options": ["collections", "itertools", "functools", "operator"], "answer": "collections", "explanation": "collections.deque supports fast appends and pops from both ends."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools returns an iterator that yields elements from the input iterable, skipping elements until the predicate becomes true, then yields the rest?", "options": ["dropwhile", "takewhile", "cycle", "repeat"], "answer": "dropwhile", "explanation": "itertools.dropwhile skips elements until the predicate becomes true, then yields the rest."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that supports reverse iteration over its keys?", "options": ["OrderedDict", "defaultdict", "Counter", "ChainMap"], "answer": "OrderedDict", "explanation": "collections.OrderedDict supports reverse iteration over its keys."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in functools is used to create a decorator that caches the results of a function with a custom expiration time for each entry?", "options": ["cachetools.TTLCache", "lru_cache", "wraps", "partial"], "answer": "cachetools.TTLCache", "explanation": "cachetools.TTLCache allows custom expiration time for each entry."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which module provides the function chain.from_iterable for flattening a list of lists?", "options": ["itertools", "collections", "functools", "operator"], "answer": "itertools", "explanation": "itertools.chain.from_iterable flattens a list of lists."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that supports moving an existing key to the end or beginning?", "options": ["OrderedDict", "defaultdict", "Counter", "ChainMap"], "answer": "OrderedDict", "explanation": "collections.OrderedDict supports moving keys to the end or beginning."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which function in itertools returns an iterator that yields elements from the input iterable, grouped by a key function and allows for grouping consecutive duplicates?", "options": ["groupby", "accumulate", "cycle", "repeat"], "answer": "groupby", "explanation": "itertools.groupby groups consecutive duplicates by a key function."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which collections class can be used to create a mapping that supports updating, merging, and reverse iteration?", "options": ["OrderedDict", "defaultdict", "Counter", "ChainMap"], "answer": "OrderedDict", "explanation": "collections.OrderedDict supports updating, merging, and reverse iteration."},
    {"language": "Python", "topic": "Advanced Modules (collections, itertools, functools, etc.)", "question": "Which module provides the function pairwise for iterating over consecutive pairs in an iterable?", "options": ["itertools", "collections", "functools", "operator"], "answer": "itertools", "explanation": "itertools.pairwise iterates over consecutive pairs in an iterable (Python 3.10+)."}
]

if __name__ == "__main__":
    seen = set()
    duplicates = []
    for q in questions_data:
        if q["question"] in seen:
            duplicates.append(q["question"])
        else:
            seen.add(q["question"])
    if duplicates:
        print("DUPLICATE QUESTIONS FOUND:")
        for dq in duplicates:
            print(dq)
    else:
        print("No duplicates found.")